//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace InvestmentManagement {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FDRmainStatement")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FDRmainStatement : global::System.Data.DataSet {
        
        private FIXEDDEPOSITDataTable tableFIXEDDEPOSIT;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FDRmainStatement() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected FDRmainStatement(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["FIXEDDEPOSIT"] != null)) {
                    base.Tables.Add(new FIXEDDEPOSITDataTable(ds.Tables["FIXEDDEPOSIT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FIXEDDEPOSITDataTable FIXEDDEPOSIT {
            get {
                return this.tableFIXEDDEPOSIT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            FDRmainStatement cln = ((FDRmainStatement)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["FIXEDDEPOSIT"] != null)) {
                    base.Tables.Add(new FIXEDDEPOSITDataTable(ds.Tables["FIXEDDEPOSIT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableFIXEDDEPOSIT = ((FIXEDDEPOSITDataTable)(base.Tables["FIXEDDEPOSIT"]));
            if ((initTable == true)) {
                if ((this.tableFIXEDDEPOSIT != null)) {
                    this.tableFIXEDDEPOSIT.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "FDRmainStatement";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FDRmainStatement.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableFIXEDDEPOSIT = new FIXEDDEPOSITDataTable();
            base.Tables.Add(this.tableFIXEDDEPOSIT);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeFIXEDDEPOSIT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            FDRmainStatement ds = new FDRmainStatement();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void FIXEDDEPOSITRowChangeEventHandler(object sender, FIXEDDEPOSITRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FIXEDDEPOSITDataTable : global::System.Data.TypedTableBase<FIXEDDEPOSITRow> {
            
            private global::System.Data.DataColumn columnREFERENCE;
            
            private global::System.Data.DataColumn columnCREATEDDATE;
            
            private global::System.Data.DataColumn columnCREATEDBY;
            
            private global::System.Data.DataColumn columnLASTUPDATED;
            
            private global::System.Data.DataColumn columnLASTUPDATEDBY;
            
            private global::System.Data.DataColumn columnDEPOSITNUMBER;
            
            private global::System.Data.DataColumn columnFINANCIALINSTITUTION_REFERENCE;
            
            private global::System.Data.DataColumn columnPRINCIPALAMOUNT;
            
            private global::System.Data.DataColumn columnCHEQUEDATE;
            
            private global::System.Data.DataColumn columnCHEQUEREFERENCE;
            
            private global::System.Data.DataColumn columnTENURE;
            
            private global::System.Data.DataColumn columnTENURETERM;
            
            private global::System.Data.DataColumn columnTERMSINDAYS;
            
            private global::System.Data.DataColumn columnINTERESTRECEIVINGPERIOD;
            
            private global::System.Data.DataColumn columnMATURITYDATE;
            
            private global::System.Data.DataColumn columnEXISTINGCAPLIMIT;
            
            private global::System.Data.DataColumn columnRATEOFINTEREST;
            
            private global::System.Data.DataColumn columnADVANCEDINTERESTRATE;
            
            private global::System.Data.DataColumn columnINTERESTMODE;
            
            private global::System.Data.DataColumn columnCOMPOUNDINTERESTTYPE;
            
            private global::System.Data.DataColumn columnCOMPOUNDINTERESTINTERVAL;
            
            private global::System.Data.DataColumn columnANNUALDAYS;
            
            private global::System.Data.DataColumn columnSTATUS;
            
            private global::System.Data.DataColumn columnACCEPTEDBY;
            
            private global::System.Data.DataColumn columnACCEPTEDDATE;
            
            private global::System.Data.DataColumn columnREJECTEDBY;
            
            private global::System.Data.DataColumn columnREJECTEDDATE;
            
            private global::System.Data.DataColumn columnOPENINGDATE;
            
            private global::System.Data.DataColumn columnRENWALDATE;
            
            private global::System.Data.DataColumn columnRENEWALDEPOSITNUMBER;
            
            private global::System.Data.DataColumn columnTAXDEDUCTIONCRITERIA;
            
            private global::System.Data.DataColumn columnHOLDINGPERIOD;
            
            private global::System.Data.DataColumn columnGROSSINTEREST;
            
            private global::System.Data.DataColumn columnSOURCETAX;
            
            private global::System.Data.DataColumn columnEXCISEDUTY;
            
            private global::System.Data.DataColumn columnOTHERCHARGE;
            
            private global::System.Data.DataColumn columnPRESENTPRINCIPALAMOUNT;
            
            private global::System.Data.DataColumn columnREMARKS;
            
            private global::System.Data.DataColumn columnNETINTERESTRECEIVABLE;
            
            private global::System.Data.DataColumn columnTOTALAMOUNTRECEIVABLE;
            
            private global::System.Data.DataColumn columnRECEIVABLETILL;
            
            private global::System.Data.DataColumn columnMRNO;
            
            private global::System.Data.DataColumn columnMRDATE;
            
            private global::System.Data.DataColumn columnENCASHMENTDATE;
            
            private global::System.Data.DataColumn columnACTUALINTERESTRECEIVED;
            
            private global::System.Data.DataColumn columnBRANCH_REFERENCE;
            
            private global::System.Data.DataColumn columnSIGNATORY1;
            
            private global::System.Data.DataColumn columnSIGNATORY2;
            
            private global::System.Data.DataColumn columnTAXRATE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FIXEDDEPOSITDataTable() {
                this.TableName = "FIXEDDEPOSIT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FIXEDDEPOSITDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected FIXEDDEPOSITDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REFERENCEColumn {
                get {
                    return this.columnREFERENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CREATEDDATEColumn {
                get {
                    return this.columnCREATEDDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CREATEDBYColumn {
                get {
                    return this.columnCREATEDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LASTUPDATEDColumn {
                get {
                    return this.columnLASTUPDATED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LASTUPDATEDBYColumn {
                get {
                    return this.columnLASTUPDATEDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DEPOSITNUMBERColumn {
                get {
                    return this.columnDEPOSITNUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FINANCIALINSTITUTION_REFERENCEColumn {
                get {
                    return this.columnFINANCIALINSTITUTION_REFERENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PRINCIPALAMOUNTColumn {
                get {
                    return this.columnPRINCIPALAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CHEQUEDATEColumn {
                get {
                    return this.columnCHEQUEDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CHEQUEREFERENCEColumn {
                get {
                    return this.columnCHEQUEREFERENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TENUREColumn {
                get {
                    return this.columnTENURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TENURETERMColumn {
                get {
                    return this.columnTENURETERM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TERMSINDAYSColumn {
                get {
                    return this.columnTERMSINDAYS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn INTERESTRECEIVINGPERIODColumn {
                get {
                    return this.columnINTERESTRECEIVINGPERIOD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MATURITYDATEColumn {
                get {
                    return this.columnMATURITYDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EXISTINGCAPLIMITColumn {
                get {
                    return this.columnEXISTINGCAPLIMIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RATEOFINTERESTColumn {
                get {
                    return this.columnRATEOFINTEREST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ADVANCEDINTERESTRATEColumn {
                get {
                    return this.columnADVANCEDINTERESTRATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn INTERESTMODEColumn {
                get {
                    return this.columnINTERESTMODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn COMPOUNDINTERESTTYPEColumn {
                get {
                    return this.columnCOMPOUNDINTERESTTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn COMPOUNDINTERESTINTERVALColumn {
                get {
                    return this.columnCOMPOUNDINTERESTINTERVAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ANNUALDAYSColumn {
                get {
                    return this.columnANNUALDAYS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ACCEPTEDBYColumn {
                get {
                    return this.columnACCEPTEDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ACCEPTEDDATEColumn {
                get {
                    return this.columnACCEPTEDDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REJECTEDBYColumn {
                get {
                    return this.columnREJECTEDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REJECTEDDATEColumn {
                get {
                    return this.columnREJECTEDDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn OPENINGDATEColumn {
                get {
                    return this.columnOPENINGDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RENWALDATEColumn {
                get {
                    return this.columnRENWALDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RENEWALDEPOSITNUMBERColumn {
                get {
                    return this.columnRENEWALDEPOSITNUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TAXDEDUCTIONCRITERIAColumn {
                get {
                    return this.columnTAXDEDUCTIONCRITERIA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HOLDINGPERIODColumn {
                get {
                    return this.columnHOLDINGPERIOD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GROSSINTERESTColumn {
                get {
                    return this.columnGROSSINTEREST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SOURCETAXColumn {
                get {
                    return this.columnSOURCETAX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EXCISEDUTYColumn {
                get {
                    return this.columnEXCISEDUTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn OTHERCHARGEColumn {
                get {
                    return this.columnOTHERCHARGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PRESENTPRINCIPALAMOUNTColumn {
                get {
                    return this.columnPRESENTPRINCIPALAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REMARKSColumn {
                get {
                    return this.columnREMARKS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NETINTERESTRECEIVABLEColumn {
                get {
                    return this.columnNETINTERESTRECEIVABLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TOTALAMOUNTRECEIVABLEColumn {
                get {
                    return this.columnTOTALAMOUNTRECEIVABLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RECEIVABLETILLColumn {
                get {
                    return this.columnRECEIVABLETILL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MRNOColumn {
                get {
                    return this.columnMRNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MRDATEColumn {
                get {
                    return this.columnMRDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ENCASHMENTDATEColumn {
                get {
                    return this.columnENCASHMENTDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ACTUALINTERESTRECEIVEDColumn {
                get {
                    return this.columnACTUALINTERESTRECEIVED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BRANCH_REFERENCEColumn {
                get {
                    return this.columnBRANCH_REFERENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SIGNATORY1Column {
                get {
                    return this.columnSIGNATORY1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SIGNATORY2Column {
                get {
                    return this.columnSIGNATORY2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TAXRATEColumn {
                get {
                    return this.columnTAXRATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FIXEDDEPOSITRow this[int index] {
                get {
                    return ((FIXEDDEPOSITRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FIXEDDEPOSITRowChangeEventHandler FIXEDDEPOSITRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FIXEDDEPOSITRowChangeEventHandler FIXEDDEPOSITRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FIXEDDEPOSITRowChangeEventHandler FIXEDDEPOSITRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FIXEDDEPOSITRowChangeEventHandler FIXEDDEPOSITRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddFIXEDDEPOSITRow(FIXEDDEPOSITRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FIXEDDEPOSITRow AddFIXEDDEPOSITRow(
                        string REFERENCE, 
                        System.DateTime CREATEDDATE, 
                        string CREATEDBY, 
                        System.DateTime LASTUPDATED, 
                        string LASTUPDATEDBY, 
                        string DEPOSITNUMBER, 
                        string FINANCIALINSTITUTION_REFERENCE, 
                        decimal PRINCIPALAMOUNT, 
                        System.DateTime CHEQUEDATE, 
                        string CHEQUEREFERENCE, 
                        decimal TENURE, 
                        string TENURETERM, 
                        decimal TERMSINDAYS, 
                        string INTERESTRECEIVINGPERIOD, 
                        System.DateTime MATURITYDATE, 
                        decimal EXISTINGCAPLIMIT, 
                        decimal RATEOFINTEREST, 
                        decimal ADVANCEDINTERESTRATE, 
                        string INTERESTMODE, 
                        string COMPOUNDINTERESTTYPE, 
                        string COMPOUNDINTERESTINTERVAL, 
                        decimal ANNUALDAYS, 
                        string STATUS, 
                        string ACCEPTEDBY, 
                        System.DateTime ACCEPTEDDATE, 
                        string REJECTEDBY, 
                        System.DateTime REJECTEDDATE, 
                        System.DateTime OPENINGDATE, 
                        System.DateTime RENWALDATE, 
                        string RENEWALDEPOSITNUMBER, 
                        string TAXDEDUCTIONCRITERIA, 
                        decimal HOLDINGPERIOD, 
                        decimal GROSSINTEREST, 
                        decimal SOURCETAX, 
                        decimal EXCISEDUTY, 
                        decimal OTHERCHARGE, 
                        decimal PRESENTPRINCIPALAMOUNT, 
                        string REMARKS, 
                        decimal NETINTERESTRECEIVABLE, 
                        decimal TOTALAMOUNTRECEIVABLE, 
                        decimal RECEIVABLETILL, 
                        string MRNO, 
                        System.DateTime MRDATE, 
                        System.DateTime ENCASHMENTDATE, 
                        decimal ACTUALINTERESTRECEIVED, 
                        string BRANCH_REFERENCE, 
                        string SIGNATORY1, 
                        string SIGNATORY2, 
                        double TAXRATE) {
                FIXEDDEPOSITRow rowFIXEDDEPOSITRow = ((FIXEDDEPOSITRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        REFERENCE,
                        CREATEDDATE,
                        CREATEDBY,
                        LASTUPDATED,
                        LASTUPDATEDBY,
                        DEPOSITNUMBER,
                        FINANCIALINSTITUTION_REFERENCE,
                        PRINCIPALAMOUNT,
                        CHEQUEDATE,
                        CHEQUEREFERENCE,
                        TENURE,
                        TENURETERM,
                        TERMSINDAYS,
                        INTERESTRECEIVINGPERIOD,
                        MATURITYDATE,
                        EXISTINGCAPLIMIT,
                        RATEOFINTEREST,
                        ADVANCEDINTERESTRATE,
                        INTERESTMODE,
                        COMPOUNDINTERESTTYPE,
                        COMPOUNDINTERESTINTERVAL,
                        ANNUALDAYS,
                        STATUS,
                        ACCEPTEDBY,
                        ACCEPTEDDATE,
                        REJECTEDBY,
                        REJECTEDDATE,
                        OPENINGDATE,
                        RENWALDATE,
                        RENEWALDEPOSITNUMBER,
                        TAXDEDUCTIONCRITERIA,
                        HOLDINGPERIOD,
                        GROSSINTEREST,
                        SOURCETAX,
                        EXCISEDUTY,
                        OTHERCHARGE,
                        PRESENTPRINCIPALAMOUNT,
                        REMARKS,
                        NETINTERESTRECEIVABLE,
                        TOTALAMOUNTRECEIVABLE,
                        RECEIVABLETILL,
                        MRNO,
                        MRDATE,
                        ENCASHMENTDATE,
                        ACTUALINTERESTRECEIVED,
                        BRANCH_REFERENCE,
                        SIGNATORY1,
                        SIGNATORY2,
                        TAXRATE};
                rowFIXEDDEPOSITRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFIXEDDEPOSITRow);
                return rowFIXEDDEPOSITRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FIXEDDEPOSITRow FindByREFERENCE(string REFERENCE) {
                return ((FIXEDDEPOSITRow)(this.Rows.Find(new object[] {
                            REFERENCE})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                FIXEDDEPOSITDataTable cln = ((FIXEDDEPOSITDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FIXEDDEPOSITDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnREFERENCE = base.Columns["REFERENCE"];
                this.columnCREATEDDATE = base.Columns["CREATEDDATE"];
                this.columnCREATEDBY = base.Columns["CREATEDBY"];
                this.columnLASTUPDATED = base.Columns["LASTUPDATED"];
                this.columnLASTUPDATEDBY = base.Columns["LASTUPDATEDBY"];
                this.columnDEPOSITNUMBER = base.Columns["DEPOSITNUMBER"];
                this.columnFINANCIALINSTITUTION_REFERENCE = base.Columns["FINANCIALINSTITUTION_REFERENCE"];
                this.columnPRINCIPALAMOUNT = base.Columns["PRINCIPALAMOUNT"];
                this.columnCHEQUEDATE = base.Columns["CHEQUEDATE"];
                this.columnCHEQUEREFERENCE = base.Columns["CHEQUEREFERENCE"];
                this.columnTENURE = base.Columns["TENURE"];
                this.columnTENURETERM = base.Columns["TENURETERM"];
                this.columnTERMSINDAYS = base.Columns["TERMSINDAYS"];
                this.columnINTERESTRECEIVINGPERIOD = base.Columns["INTERESTRECEIVINGPERIOD"];
                this.columnMATURITYDATE = base.Columns["MATURITYDATE"];
                this.columnEXISTINGCAPLIMIT = base.Columns["EXISTINGCAPLIMIT"];
                this.columnRATEOFINTEREST = base.Columns["RATEOFINTEREST"];
                this.columnADVANCEDINTERESTRATE = base.Columns["ADVANCEDINTERESTRATE"];
                this.columnINTERESTMODE = base.Columns["INTERESTMODE"];
                this.columnCOMPOUNDINTERESTTYPE = base.Columns["COMPOUNDINTERESTTYPE"];
                this.columnCOMPOUNDINTERESTINTERVAL = base.Columns["COMPOUNDINTERESTINTERVAL"];
                this.columnANNUALDAYS = base.Columns["ANNUALDAYS"];
                this.columnSTATUS = base.Columns["STATUS"];
                this.columnACCEPTEDBY = base.Columns["ACCEPTEDBY"];
                this.columnACCEPTEDDATE = base.Columns["ACCEPTEDDATE"];
                this.columnREJECTEDBY = base.Columns["REJECTEDBY"];
                this.columnREJECTEDDATE = base.Columns["REJECTEDDATE"];
                this.columnOPENINGDATE = base.Columns["OPENINGDATE"];
                this.columnRENWALDATE = base.Columns["RENWALDATE"];
                this.columnRENEWALDEPOSITNUMBER = base.Columns["RENEWALDEPOSITNUMBER"];
                this.columnTAXDEDUCTIONCRITERIA = base.Columns["TAXDEDUCTIONCRITERIA"];
                this.columnHOLDINGPERIOD = base.Columns["HOLDINGPERIOD"];
                this.columnGROSSINTEREST = base.Columns["GROSSINTEREST"];
                this.columnSOURCETAX = base.Columns["SOURCETAX"];
                this.columnEXCISEDUTY = base.Columns["EXCISEDUTY"];
                this.columnOTHERCHARGE = base.Columns["OTHERCHARGE"];
                this.columnPRESENTPRINCIPALAMOUNT = base.Columns["PRESENTPRINCIPALAMOUNT"];
                this.columnREMARKS = base.Columns["REMARKS"];
                this.columnNETINTERESTRECEIVABLE = base.Columns["NETINTERESTRECEIVABLE"];
                this.columnTOTALAMOUNTRECEIVABLE = base.Columns["TOTALAMOUNTRECEIVABLE"];
                this.columnRECEIVABLETILL = base.Columns["RECEIVABLETILL"];
                this.columnMRNO = base.Columns["MRNO"];
                this.columnMRDATE = base.Columns["MRDATE"];
                this.columnENCASHMENTDATE = base.Columns["ENCASHMENTDATE"];
                this.columnACTUALINTERESTRECEIVED = base.Columns["ACTUALINTERESTRECEIVED"];
                this.columnBRANCH_REFERENCE = base.Columns["BRANCH_REFERENCE"];
                this.columnSIGNATORY1 = base.Columns["SIGNATORY1"];
                this.columnSIGNATORY2 = base.Columns["SIGNATORY2"];
                this.columnTAXRATE = base.Columns["TAXRATE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnREFERENCE = new global::System.Data.DataColumn("REFERENCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREFERENCE);
                this.columnCREATEDDATE = new global::System.Data.DataColumn("CREATEDDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATEDDATE);
                this.columnCREATEDBY = new global::System.Data.DataColumn("CREATEDBY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATEDBY);
                this.columnLASTUPDATED = new global::System.Data.DataColumn("LASTUPDATED", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLASTUPDATED);
                this.columnLASTUPDATEDBY = new global::System.Data.DataColumn("LASTUPDATEDBY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLASTUPDATEDBY);
                this.columnDEPOSITNUMBER = new global::System.Data.DataColumn("DEPOSITNUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEPOSITNUMBER);
                this.columnFINANCIALINSTITUTION_REFERENCE = new global::System.Data.DataColumn("FINANCIALINSTITUTION_REFERENCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFINANCIALINSTITUTION_REFERENCE);
                this.columnPRINCIPALAMOUNT = new global::System.Data.DataColumn("PRINCIPALAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRINCIPALAMOUNT);
                this.columnCHEQUEDATE = new global::System.Data.DataColumn("CHEQUEDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHEQUEDATE);
                this.columnCHEQUEREFERENCE = new global::System.Data.DataColumn("CHEQUEREFERENCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHEQUEREFERENCE);
                this.columnTENURE = new global::System.Data.DataColumn("TENURE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTENURE);
                this.columnTENURETERM = new global::System.Data.DataColumn("TENURETERM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTENURETERM);
                this.columnTERMSINDAYS = new global::System.Data.DataColumn("TERMSINDAYS", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTERMSINDAYS);
                this.columnINTERESTRECEIVINGPERIOD = new global::System.Data.DataColumn("INTERESTRECEIVINGPERIOD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINTERESTRECEIVINGPERIOD);
                this.columnMATURITYDATE = new global::System.Data.DataColumn("MATURITYDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMATURITYDATE);
                this.columnEXISTINGCAPLIMIT = new global::System.Data.DataColumn("EXISTINGCAPLIMIT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXISTINGCAPLIMIT);
                this.columnRATEOFINTEREST = new global::System.Data.DataColumn("RATEOFINTEREST", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRATEOFINTEREST);
                this.columnADVANCEDINTERESTRATE = new global::System.Data.DataColumn("ADVANCEDINTERESTRATE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADVANCEDINTERESTRATE);
                this.columnINTERESTMODE = new global::System.Data.DataColumn("INTERESTMODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINTERESTMODE);
                this.columnCOMPOUNDINTERESTTYPE = new global::System.Data.DataColumn("COMPOUNDINTERESTTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPOUNDINTERESTTYPE);
                this.columnCOMPOUNDINTERESTINTERVAL = new global::System.Data.DataColumn("COMPOUNDINTERESTINTERVAL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPOUNDINTERESTINTERVAL);
                this.columnANNUALDAYS = new global::System.Data.DataColumn("ANNUALDAYS", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnANNUALDAYS);
                this.columnSTATUS = new global::System.Data.DataColumn("STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS);
                this.columnACCEPTEDBY = new global::System.Data.DataColumn("ACCEPTEDBY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACCEPTEDBY);
                this.columnACCEPTEDDATE = new global::System.Data.DataColumn("ACCEPTEDDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACCEPTEDDATE);
                this.columnREJECTEDBY = new global::System.Data.DataColumn("REJECTEDBY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREJECTEDBY);
                this.columnREJECTEDDATE = new global::System.Data.DataColumn("REJECTEDDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREJECTEDDATE);
                this.columnOPENINGDATE = new global::System.Data.DataColumn("OPENINGDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPENINGDATE);
                this.columnRENWALDATE = new global::System.Data.DataColumn("RENWALDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRENWALDATE);
                this.columnRENEWALDEPOSITNUMBER = new global::System.Data.DataColumn("RENEWALDEPOSITNUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRENEWALDEPOSITNUMBER);
                this.columnTAXDEDUCTIONCRITERIA = new global::System.Data.DataColumn("TAXDEDUCTIONCRITERIA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTAXDEDUCTIONCRITERIA);
                this.columnHOLDINGPERIOD = new global::System.Data.DataColumn("HOLDINGPERIOD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHOLDINGPERIOD);
                this.columnGROSSINTEREST = new global::System.Data.DataColumn("GROSSINTEREST", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGROSSINTEREST);
                this.columnSOURCETAX = new global::System.Data.DataColumn("SOURCETAX", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOURCETAX);
                this.columnEXCISEDUTY = new global::System.Data.DataColumn("EXCISEDUTY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXCISEDUTY);
                this.columnOTHERCHARGE = new global::System.Data.DataColumn("OTHERCHARGE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOTHERCHARGE);
                this.columnPRESENTPRINCIPALAMOUNT = new global::System.Data.DataColumn("PRESENTPRINCIPALAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRESENTPRINCIPALAMOUNT);
                this.columnREMARKS = new global::System.Data.DataColumn("REMARKS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREMARKS);
                this.columnNETINTERESTRECEIVABLE = new global::System.Data.DataColumn("NETINTERESTRECEIVABLE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNETINTERESTRECEIVABLE);
                this.columnTOTALAMOUNTRECEIVABLE = new global::System.Data.DataColumn("TOTALAMOUNTRECEIVABLE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTALAMOUNTRECEIVABLE);
                this.columnRECEIVABLETILL = new global::System.Data.DataColumn("RECEIVABLETILL", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECEIVABLETILL);
                this.columnMRNO = new global::System.Data.DataColumn("MRNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMRNO);
                this.columnMRDATE = new global::System.Data.DataColumn("MRDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMRDATE);
                this.columnENCASHMENTDATE = new global::System.Data.DataColumn("ENCASHMENTDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnENCASHMENTDATE);
                this.columnACTUALINTERESTRECEIVED = new global::System.Data.DataColumn("ACTUALINTERESTRECEIVED", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACTUALINTERESTRECEIVED);
                this.columnBRANCH_REFERENCE = new global::System.Data.DataColumn("BRANCH_REFERENCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBRANCH_REFERENCE);
                this.columnSIGNATORY1 = new global::System.Data.DataColumn("SIGNATORY1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSIGNATORY1);
                this.columnSIGNATORY2 = new global::System.Data.DataColumn("SIGNATORY2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSIGNATORY2);
                this.columnTAXRATE = new global::System.Data.DataColumn("TAXRATE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTAXRATE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnREFERENCE}, true));
                this.columnREFERENCE.AllowDBNull = false;
                this.columnREFERENCE.Unique = true;
                this.columnREFERENCE.MaxLength = 50;
                this.columnCREATEDBY.MaxLength = 50;
                this.columnLASTUPDATEDBY.MaxLength = 50;
                this.columnDEPOSITNUMBER.MaxLength = 50;
                this.columnFINANCIALINSTITUTION_REFERENCE.MaxLength = 50;
                this.columnCHEQUEREFERENCE.MaxLength = 50;
                this.columnTENURETERM.MaxLength = 10;
                this.columnINTERESTRECEIVINGPERIOD.MaxLength = 10;
                this.columnINTERESTMODE.MaxLength = 10;
                this.columnCOMPOUNDINTERESTTYPE.MaxLength = 10;
                this.columnCOMPOUNDINTERESTINTERVAL.MaxLength = 10;
                this.columnSTATUS.MaxLength = 10;
                this.columnACCEPTEDBY.MaxLength = 50;
                this.columnREJECTEDBY.MaxLength = 10;
                this.columnRENEWALDEPOSITNUMBER.MaxLength = 50;
                this.columnTAXDEDUCTIONCRITERIA.MaxLength = 50;
                this.columnREMARKS.MaxLength = 50;
                this.columnMRNO.MaxLength = 50;
                this.columnBRANCH_REFERENCE.MaxLength = 50;
                this.columnSIGNATORY1.MaxLength = 50;
                this.columnSIGNATORY2.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FIXEDDEPOSITRow NewFIXEDDEPOSITRow() {
                return ((FIXEDDEPOSITRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FIXEDDEPOSITRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(FIXEDDEPOSITRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FIXEDDEPOSITRowChanged != null)) {
                    this.FIXEDDEPOSITRowChanged(this, new FIXEDDEPOSITRowChangeEvent(((FIXEDDEPOSITRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FIXEDDEPOSITRowChanging != null)) {
                    this.FIXEDDEPOSITRowChanging(this, new FIXEDDEPOSITRowChangeEvent(((FIXEDDEPOSITRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FIXEDDEPOSITRowDeleted != null)) {
                    this.FIXEDDEPOSITRowDeleted(this, new FIXEDDEPOSITRowChangeEvent(((FIXEDDEPOSITRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FIXEDDEPOSITRowDeleting != null)) {
                    this.FIXEDDEPOSITRowDeleting(this, new FIXEDDEPOSITRowChangeEvent(((FIXEDDEPOSITRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveFIXEDDEPOSITRow(FIXEDDEPOSITRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FDRmainStatement ds = new FDRmainStatement();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FIXEDDEPOSITDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class FIXEDDEPOSITRow : global::System.Data.DataRow {
            
            private FIXEDDEPOSITDataTable tableFIXEDDEPOSIT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FIXEDDEPOSITRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFIXEDDEPOSIT = ((FIXEDDEPOSITDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string REFERENCE {
                get {
                    return ((string)(this[this.tableFIXEDDEPOSIT.REFERENCEColumn]));
                }
                set {
                    this[this.tableFIXEDDEPOSIT.REFERENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime CREATEDDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFIXEDDEPOSIT.CREATEDDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATEDDATE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.CREATEDDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CREATEDBY {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.CREATEDBYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATEDBY\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.CREATEDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime LASTUPDATED {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFIXEDDEPOSIT.LASTUPDATEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LASTUPDATED\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.LASTUPDATEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LASTUPDATEDBY {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.LASTUPDATEDBYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LASTUPDATEDBY\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.LASTUPDATEDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DEPOSITNUMBER {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.DEPOSITNUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEPOSITNUMBER\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.DEPOSITNUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FINANCIALINSTITUTION_REFERENCE {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.FINANCIALINSTITUTION_REFERENCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FINANCIALINSTITUTION_REFERENCE\' in table \'FIXEDDEPOSIT\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.FINANCIALINSTITUTION_REFERENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PRINCIPALAMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tableFIXEDDEPOSIT.PRINCIPALAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRINCIPALAMOUNT\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.PRINCIPALAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime CHEQUEDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFIXEDDEPOSIT.CHEQUEDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CHEQUEDATE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.CHEQUEDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CHEQUEREFERENCE {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.CHEQUEREFERENCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CHEQUEREFERENCE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.CHEQUEREFERENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TENURE {
                get {
                    try {
                        return ((decimal)(this[this.tableFIXEDDEPOSIT.TENUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TENURE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.TENUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TENURETERM {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.TENURETERMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TENURETERM\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.TENURETERMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TERMSINDAYS {
                get {
                    try {
                        return ((decimal)(this[this.tableFIXEDDEPOSIT.TERMSINDAYSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TERMSINDAYS\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.TERMSINDAYSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string INTERESTRECEIVINGPERIOD {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.INTERESTRECEIVINGPERIODColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INTERESTRECEIVINGPERIOD\' in table \'FIXEDDEPOSIT\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.INTERESTRECEIVINGPERIODColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime MATURITYDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFIXEDDEPOSIT.MATURITYDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MATURITYDATE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.MATURITYDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal EXISTINGCAPLIMIT {
                get {
                    try {
                        return ((decimal)(this[this.tableFIXEDDEPOSIT.EXISTINGCAPLIMITColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXISTINGCAPLIMIT\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.EXISTINGCAPLIMITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal RATEOFINTEREST {
                get {
                    try {
                        return ((decimal)(this[this.tableFIXEDDEPOSIT.RATEOFINTERESTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RATEOFINTEREST\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.RATEOFINTERESTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ADVANCEDINTERESTRATE {
                get {
                    try {
                        return ((decimal)(this[this.tableFIXEDDEPOSIT.ADVANCEDINTERESTRATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADVANCEDINTERESTRATE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.ADVANCEDINTERESTRATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string INTERESTMODE {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.INTERESTMODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INTERESTMODE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.INTERESTMODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string COMPOUNDINTERESTTYPE {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.COMPOUNDINTERESTTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPOUNDINTERESTTYPE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.COMPOUNDINTERESTTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string COMPOUNDINTERESTINTERVAL {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.COMPOUNDINTERESTINTERVALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPOUNDINTERESTINTERVAL\' in table \'FIXEDDEPOSIT\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.COMPOUNDINTERESTINTERVALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ANNUALDAYS {
                get {
                    try {
                        return ((decimal)(this[this.tableFIXEDDEPOSIT.ANNUALDAYSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ANNUALDAYS\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.ANNUALDAYSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string STATUS {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.STATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATUS\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ACCEPTEDBY {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.ACCEPTEDBYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ACCEPTEDBY\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.ACCEPTEDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime ACCEPTEDDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFIXEDDEPOSIT.ACCEPTEDDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ACCEPTEDDATE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.ACCEPTEDDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string REJECTEDBY {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.REJECTEDBYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REJECTEDBY\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.REJECTEDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime REJECTEDDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFIXEDDEPOSIT.REJECTEDDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REJECTEDDATE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.REJECTEDDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime OPENINGDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFIXEDDEPOSIT.OPENINGDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OPENINGDATE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.OPENINGDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime RENWALDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFIXEDDEPOSIT.RENWALDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RENWALDATE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.RENWALDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RENEWALDEPOSITNUMBER {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.RENEWALDEPOSITNUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RENEWALDEPOSITNUMBER\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.RENEWALDEPOSITNUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TAXDEDUCTIONCRITERIA {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.TAXDEDUCTIONCRITERIAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TAXDEDUCTIONCRITERIA\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.TAXDEDUCTIONCRITERIAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal HOLDINGPERIOD {
                get {
                    try {
                        return ((decimal)(this[this.tableFIXEDDEPOSIT.HOLDINGPERIODColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HOLDINGPERIOD\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.HOLDINGPERIODColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal GROSSINTEREST {
                get {
                    try {
                        return ((decimal)(this[this.tableFIXEDDEPOSIT.GROSSINTERESTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GROSSINTEREST\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.GROSSINTERESTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SOURCETAX {
                get {
                    try {
                        return ((decimal)(this[this.tableFIXEDDEPOSIT.SOURCETAXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SOURCETAX\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.SOURCETAXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal EXCISEDUTY {
                get {
                    try {
                        return ((decimal)(this[this.tableFIXEDDEPOSIT.EXCISEDUTYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXCISEDUTY\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.EXCISEDUTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal OTHERCHARGE {
                get {
                    try {
                        return ((decimal)(this[this.tableFIXEDDEPOSIT.OTHERCHARGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OTHERCHARGE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.OTHERCHARGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PRESENTPRINCIPALAMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tableFIXEDDEPOSIT.PRESENTPRINCIPALAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRESENTPRINCIPALAMOUNT\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.PRESENTPRINCIPALAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string REMARKS {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.REMARKSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REMARKS\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.REMARKSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal NETINTERESTRECEIVABLE {
                get {
                    try {
                        return ((decimal)(this[this.tableFIXEDDEPOSIT.NETINTERESTRECEIVABLEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NETINTERESTRECEIVABLE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.NETINTERESTRECEIVABLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TOTALAMOUNTRECEIVABLE {
                get {
                    try {
                        return ((decimal)(this[this.tableFIXEDDEPOSIT.TOTALAMOUNTRECEIVABLEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOTALAMOUNTRECEIVABLE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.TOTALAMOUNTRECEIVABLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal RECEIVABLETILL {
                get {
                    try {
                        return ((decimal)(this[this.tableFIXEDDEPOSIT.RECEIVABLETILLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RECEIVABLETILL\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.RECEIVABLETILLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string MRNO {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.MRNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MRNO\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.MRNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime MRDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFIXEDDEPOSIT.MRDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MRDATE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.MRDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime ENCASHMENTDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFIXEDDEPOSIT.ENCASHMENTDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ENCASHMENTDATE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.ENCASHMENTDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ACTUALINTERESTRECEIVED {
                get {
                    try {
                        return ((decimal)(this[this.tableFIXEDDEPOSIT.ACTUALINTERESTRECEIVEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ACTUALINTERESTRECEIVED\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.ACTUALINTERESTRECEIVEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BRANCH_REFERENCE {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.BRANCH_REFERENCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BRANCH_REFERENCE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.BRANCH_REFERENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SIGNATORY1 {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.SIGNATORY1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SIGNATORY1\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.SIGNATORY1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SIGNATORY2 {
                get {
                    try {
                        return ((string)(this[this.tableFIXEDDEPOSIT.SIGNATORY2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SIGNATORY2\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.SIGNATORY2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double TAXRATE {
                get {
                    try {
                        return ((double)(this[this.tableFIXEDDEPOSIT.TAXRATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TAXRATE\' in table \'FIXEDDEPOSIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFIXEDDEPOSIT.TAXRATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCREATEDDATENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.CREATEDDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCREATEDDATENull() {
                this[this.tableFIXEDDEPOSIT.CREATEDDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCREATEDBYNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.CREATEDBYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCREATEDBYNull() {
                this[this.tableFIXEDDEPOSIT.CREATEDBYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLASTUPDATEDNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.LASTUPDATEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLASTUPDATEDNull() {
                this[this.tableFIXEDDEPOSIT.LASTUPDATEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLASTUPDATEDBYNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.LASTUPDATEDBYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLASTUPDATEDBYNull() {
                this[this.tableFIXEDDEPOSIT.LASTUPDATEDBYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDEPOSITNUMBERNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.DEPOSITNUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDEPOSITNUMBERNull() {
                this[this.tableFIXEDDEPOSIT.DEPOSITNUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFINANCIALINSTITUTION_REFERENCENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.FINANCIALINSTITUTION_REFERENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFINANCIALINSTITUTION_REFERENCENull() {
                this[this.tableFIXEDDEPOSIT.FINANCIALINSTITUTION_REFERENCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPRINCIPALAMOUNTNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.PRINCIPALAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPRINCIPALAMOUNTNull() {
                this[this.tableFIXEDDEPOSIT.PRINCIPALAMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCHEQUEDATENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.CHEQUEDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCHEQUEDATENull() {
                this[this.tableFIXEDDEPOSIT.CHEQUEDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCHEQUEREFERENCENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.CHEQUEREFERENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCHEQUEREFERENCENull() {
                this[this.tableFIXEDDEPOSIT.CHEQUEREFERENCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTENURENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.TENUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTENURENull() {
                this[this.tableFIXEDDEPOSIT.TENUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTENURETERMNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.TENURETERMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTENURETERMNull() {
                this[this.tableFIXEDDEPOSIT.TENURETERMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTERMSINDAYSNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.TERMSINDAYSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTERMSINDAYSNull() {
                this[this.tableFIXEDDEPOSIT.TERMSINDAYSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsINTERESTRECEIVINGPERIODNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.INTERESTRECEIVINGPERIODColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetINTERESTRECEIVINGPERIODNull() {
                this[this.tableFIXEDDEPOSIT.INTERESTRECEIVINGPERIODColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMATURITYDATENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.MATURITYDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMATURITYDATENull() {
                this[this.tableFIXEDDEPOSIT.MATURITYDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEXISTINGCAPLIMITNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.EXISTINGCAPLIMITColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEXISTINGCAPLIMITNull() {
                this[this.tableFIXEDDEPOSIT.EXISTINGCAPLIMITColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRATEOFINTERESTNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.RATEOFINTERESTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRATEOFINTERESTNull() {
                this[this.tableFIXEDDEPOSIT.RATEOFINTERESTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsADVANCEDINTERESTRATENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.ADVANCEDINTERESTRATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetADVANCEDINTERESTRATENull() {
                this[this.tableFIXEDDEPOSIT.ADVANCEDINTERESTRATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsINTERESTMODENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.INTERESTMODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetINTERESTMODENull() {
                this[this.tableFIXEDDEPOSIT.INTERESTMODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCOMPOUNDINTERESTTYPENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.COMPOUNDINTERESTTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCOMPOUNDINTERESTTYPENull() {
                this[this.tableFIXEDDEPOSIT.COMPOUNDINTERESTTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCOMPOUNDINTERESTINTERVALNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.COMPOUNDINTERESTINTERVALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCOMPOUNDINTERESTINTERVALNull() {
                this[this.tableFIXEDDEPOSIT.COMPOUNDINTERESTINTERVALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsANNUALDAYSNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.ANNUALDAYSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetANNUALDAYSNull() {
                this[this.tableFIXEDDEPOSIT.ANNUALDAYSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSTATUSNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSTATUSNull() {
                this[this.tableFIXEDDEPOSIT.STATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsACCEPTEDBYNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.ACCEPTEDBYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetACCEPTEDBYNull() {
                this[this.tableFIXEDDEPOSIT.ACCEPTEDBYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsACCEPTEDDATENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.ACCEPTEDDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetACCEPTEDDATENull() {
                this[this.tableFIXEDDEPOSIT.ACCEPTEDDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsREJECTEDBYNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.REJECTEDBYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetREJECTEDBYNull() {
                this[this.tableFIXEDDEPOSIT.REJECTEDBYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsREJECTEDDATENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.REJECTEDDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetREJECTEDDATENull() {
                this[this.tableFIXEDDEPOSIT.REJECTEDDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsOPENINGDATENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.OPENINGDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetOPENINGDATENull() {
                this[this.tableFIXEDDEPOSIT.OPENINGDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRENWALDATENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.RENWALDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRENWALDATENull() {
                this[this.tableFIXEDDEPOSIT.RENWALDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRENEWALDEPOSITNUMBERNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.RENEWALDEPOSITNUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRENEWALDEPOSITNUMBERNull() {
                this[this.tableFIXEDDEPOSIT.RENEWALDEPOSITNUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTAXDEDUCTIONCRITERIANull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.TAXDEDUCTIONCRITERIAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTAXDEDUCTIONCRITERIANull() {
                this[this.tableFIXEDDEPOSIT.TAXDEDUCTIONCRITERIAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHOLDINGPERIODNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.HOLDINGPERIODColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHOLDINGPERIODNull() {
                this[this.tableFIXEDDEPOSIT.HOLDINGPERIODColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGROSSINTERESTNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.GROSSINTERESTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGROSSINTERESTNull() {
                this[this.tableFIXEDDEPOSIT.GROSSINTERESTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSOURCETAXNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.SOURCETAXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSOURCETAXNull() {
                this[this.tableFIXEDDEPOSIT.SOURCETAXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEXCISEDUTYNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.EXCISEDUTYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEXCISEDUTYNull() {
                this[this.tableFIXEDDEPOSIT.EXCISEDUTYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsOTHERCHARGENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.OTHERCHARGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetOTHERCHARGENull() {
                this[this.tableFIXEDDEPOSIT.OTHERCHARGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPRESENTPRINCIPALAMOUNTNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.PRESENTPRINCIPALAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPRESENTPRINCIPALAMOUNTNull() {
                this[this.tableFIXEDDEPOSIT.PRESENTPRINCIPALAMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsREMARKSNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.REMARKSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetREMARKSNull() {
                this[this.tableFIXEDDEPOSIT.REMARKSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNETINTERESTRECEIVABLENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.NETINTERESTRECEIVABLEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNETINTERESTRECEIVABLENull() {
                this[this.tableFIXEDDEPOSIT.NETINTERESTRECEIVABLEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTOTALAMOUNTRECEIVABLENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.TOTALAMOUNTRECEIVABLEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTOTALAMOUNTRECEIVABLENull() {
                this[this.tableFIXEDDEPOSIT.TOTALAMOUNTRECEIVABLEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRECEIVABLETILLNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.RECEIVABLETILLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRECEIVABLETILLNull() {
                this[this.tableFIXEDDEPOSIT.RECEIVABLETILLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMRNONull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.MRNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMRNONull() {
                this[this.tableFIXEDDEPOSIT.MRNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMRDATENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.MRDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMRDATENull() {
                this[this.tableFIXEDDEPOSIT.MRDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsENCASHMENTDATENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.ENCASHMENTDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetENCASHMENTDATENull() {
                this[this.tableFIXEDDEPOSIT.ENCASHMENTDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsACTUALINTERESTRECEIVEDNull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.ACTUALINTERESTRECEIVEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetACTUALINTERESTRECEIVEDNull() {
                this[this.tableFIXEDDEPOSIT.ACTUALINTERESTRECEIVEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBRANCH_REFERENCENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.BRANCH_REFERENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBRANCH_REFERENCENull() {
                this[this.tableFIXEDDEPOSIT.BRANCH_REFERENCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSIGNATORY1Null() {
                return this.IsNull(this.tableFIXEDDEPOSIT.SIGNATORY1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSIGNATORY1Null() {
                this[this.tableFIXEDDEPOSIT.SIGNATORY1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSIGNATORY2Null() {
                return this.IsNull(this.tableFIXEDDEPOSIT.SIGNATORY2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSIGNATORY2Null() {
                this[this.tableFIXEDDEPOSIT.SIGNATORY2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTAXRATENull() {
                return this.IsNull(this.tableFIXEDDEPOSIT.TAXRATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTAXRATENull() {
                this[this.tableFIXEDDEPOSIT.TAXRATEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class FIXEDDEPOSITRowChangeEvent : global::System.EventArgs {
            
            private FIXEDDEPOSITRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FIXEDDEPOSITRowChangeEvent(FIXEDDEPOSITRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FIXEDDEPOSITRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace InvestmentManagement.FDRmainStatementTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FIXEDDEPOSITTableAdapter : global::System.ComponentModel.Component {
        
        private global::Oracle.ManagedDataAccess.Client.OracleDataAdapter _adapter;
        
        private global::Oracle.ManagedDataAccess.Client.OracleConnection _connection;
        
        private global::Oracle.ManagedDataAccess.Client.OracleTransaction _transaction;
        
        private global::Oracle.ManagedDataAccess.Client.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FIXEDDEPOSITTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::Oracle.ManagedDataAccess.Client.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::Oracle.ManagedDataAccess.Client.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Oracle.ManagedDataAccess.Client.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::Oracle.ManagedDataAccess.Client.OracleTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::Oracle.ManagedDataAccess.Client.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Oracle.ManagedDataAccess.Client.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FIXEDDEPOSIT";
            tableMapping.ColumnMappings.Add("REFERENCE", "REFERENCE");
            tableMapping.ColumnMappings.Add("CREATEDDATE", "CREATEDDATE");
            tableMapping.ColumnMappings.Add("CREATEDBY", "CREATEDBY");
            tableMapping.ColumnMappings.Add("LASTUPDATED", "LASTUPDATED");
            tableMapping.ColumnMappings.Add("LASTUPDATEDBY", "LASTUPDATEDBY");
            tableMapping.ColumnMappings.Add("DEPOSITNUMBER", "DEPOSITNUMBER");
            tableMapping.ColumnMappings.Add("FINANCIALINSTITUTION_REFERENCE", "FINANCIALINSTITUTION_REFERENCE");
            tableMapping.ColumnMappings.Add("PRINCIPALAMOUNT", "PRINCIPALAMOUNT");
            tableMapping.ColumnMappings.Add("CHEQUEDATE", "CHEQUEDATE");
            tableMapping.ColumnMappings.Add("CHEQUEREFERENCE", "CHEQUEREFERENCE");
            tableMapping.ColumnMappings.Add("TENURE", "TENURE");
            tableMapping.ColumnMappings.Add("TENURETERM", "TENURETERM");
            tableMapping.ColumnMappings.Add("TERMSINDAYS", "TERMSINDAYS");
            tableMapping.ColumnMappings.Add("INTERESTRECEIVINGPERIOD", "INTERESTRECEIVINGPERIOD");
            tableMapping.ColumnMappings.Add("MATURITYDATE", "MATURITYDATE");
            tableMapping.ColumnMappings.Add("EXISTINGCAPLIMIT", "EXISTINGCAPLIMIT");
            tableMapping.ColumnMappings.Add("RATEOFINTEREST", "RATEOFINTEREST");
            tableMapping.ColumnMappings.Add("ADVANCEDINTERESTRATE", "ADVANCEDINTERESTRATE");
            tableMapping.ColumnMappings.Add("INTERESTMODE", "INTERESTMODE");
            tableMapping.ColumnMappings.Add("COMPOUNDINTERESTTYPE", "COMPOUNDINTERESTTYPE");
            tableMapping.ColumnMappings.Add("COMPOUNDINTERESTINTERVAL", "COMPOUNDINTERESTINTERVAL");
            tableMapping.ColumnMappings.Add("ANNUALDAYS", "ANNUALDAYS");
            tableMapping.ColumnMappings.Add("STATUS", "STATUS");
            tableMapping.ColumnMappings.Add("ACCEPTEDBY", "ACCEPTEDBY");
            tableMapping.ColumnMappings.Add("ACCEPTEDDATE", "ACCEPTEDDATE");
            tableMapping.ColumnMappings.Add("REJECTEDBY", "REJECTEDBY");
            tableMapping.ColumnMappings.Add("REJECTEDDATE", "REJECTEDDATE");
            tableMapping.ColumnMappings.Add("OPENINGDATE", "OPENINGDATE");
            tableMapping.ColumnMappings.Add("RENWALDATE", "RENWALDATE");
            tableMapping.ColumnMappings.Add("RENEWALDEPOSITNUMBER", "RENEWALDEPOSITNUMBER");
            tableMapping.ColumnMappings.Add("TAXDEDUCTIONCRITERIA", "TAXDEDUCTIONCRITERIA");
            tableMapping.ColumnMappings.Add("HOLDINGPERIOD", "HOLDINGPERIOD");
            tableMapping.ColumnMappings.Add("GROSSINTEREST", "GROSSINTEREST");
            tableMapping.ColumnMappings.Add("SOURCETAX", "SOURCETAX");
            tableMapping.ColumnMappings.Add("EXCISEDUTY", "EXCISEDUTY");
            tableMapping.ColumnMappings.Add("OTHERCHARGE", "OTHERCHARGE");
            tableMapping.ColumnMappings.Add("PRESENTPRINCIPALAMOUNT", "PRESENTPRINCIPALAMOUNT");
            tableMapping.ColumnMappings.Add("REMARKS", "REMARKS");
            tableMapping.ColumnMappings.Add("NETINTERESTRECEIVABLE", "NETINTERESTRECEIVABLE");
            tableMapping.ColumnMappings.Add("TOTALAMOUNTRECEIVABLE", "TOTALAMOUNTRECEIVABLE");
            tableMapping.ColumnMappings.Add("RECEIVABLETILL", "RECEIVABLETILL");
            tableMapping.ColumnMappings.Add("MRNO", "MRNO");
            tableMapping.ColumnMappings.Add("MRDATE", "MRDATE");
            tableMapping.ColumnMappings.Add("ENCASHMENTDATE", "ENCASHMENTDATE");
            tableMapping.ColumnMappings.Add("ACTUALINTERESTRECEIVED", "ACTUALINTERESTRECEIVED");
            tableMapping.ColumnMappings.Add("BRANCH_REFERENCE", "BRANCH_REFERENCE");
            tableMapping.ColumnMappings.Add("SIGNATORY1", "SIGNATORY1");
            tableMapping.ColumnMappings.Add("SIGNATORY2", "SIGNATORY2");
            tableMapping.ColumnMappings.Add("TAXRATE", "TAXRATE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Oracle.ManagedDataAccess.Client.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"MPRO\".\"FIXEDDEPOSIT\" WHERE ((\"REFERENCE\" = :Original_REFERENCE))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Oracle.ManagedDataAccess.Client.OracleParameter param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_REFERENCE";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "REFERENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Oracle.ManagedDataAccess.Client.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"MPRO\".\"FIXEDDEPOSIT\" (\"REFERENCE\", \"CREATEDDATE\", \"CREATEDBY\", \"LAST" +
                "UPDATED\", \"LASTUPDATEDBY\", \"DEPOSITNUMBER\", \"FINANCIALINSTITUTION_REFERENCE\", \"P" +
                "RINCIPALAMOUNT\", \"CHEQUEDATE\", \"CHEQUEREFERENCE\", \"TENURE\", \"TENURETERM\", \"TERMS" +
                "INDAYS\", \"INTERESTRECEIVINGPERIOD\", \"MATURITYDATE\", \"EXISTINGCAPLIMIT\", \"RATEOFI" +
                "NTEREST\", \"ADVANCEDINTERESTRATE\", \"INTERESTMODE\", \"COMPOUNDINTERESTTYPE\", \"COMPO" +
                "UNDINTERESTINTERVAL\", \"ANNUALDAYS\", \"STATUS\", \"ACCEPTEDBY\", \"ACCEPTEDDATE\", \"REJ" +
                "ECTEDBY\", \"REJECTEDDATE\", \"OPENINGDATE\", \"RENWALDATE\", \"RENEWALDEPOSITNUMBER\", \"" +
                "TAXDEDUCTIONCRITERIA\", \"HOLDINGPERIOD\", \"GROSSINTEREST\", \"SOURCETAX\", \"EXCISEDUT" +
                "Y\", \"OTHERCHARGE\", \"PRESENTPRINCIPALAMOUNT\", \"REMARKS\", \"NETINTERESTRECEIVABLE\"," +
                " \"TOTALAMOUNTRECEIVABLE\", \"RECEIVABLETILL\", \"MRNO\", \"MRDATE\", \"ENCASHMENTDATE\", " +
                "\"ACTUALINTERESTRECEIVED\", \"BRANCH_REFERENCE\", \"SIGNATORY1\", \"SIGNATORY2\", \"TAXRA" +
                "TE\") VALUES (:REFERENCE, :CREATEDDATE, :CREATEDBY, :LASTUPDATED, :LASTUPDATEDBY," +
                " :DEPOSITNUMBER, :p1, :PRINCIPALAMOUNT, :CHEQUEDATE, :CHEQUEREFERENCE, :TENURE, " +
                ":TENURETERM, :TERMSINDAYS, :p4, :MATURITYDATE, :EXISTINGCAPLIMIT, :RATEOFINTERES" +
                "T, :ADVANCEDINTERESTRATE, :INTERESTMODE, :COMPOUNDINTERESTTYPE, :p7, :ANNUALDAYS" +
                ", :STATUS, :ACCEPTEDBY, :ACCEPTEDDATE, :REJECTEDBY, :REJECTEDDATE, :OPENINGDATE," +
                " :RENWALDATE, :RENEWALDEPOSITNUMBER, :TAXDEDUCTIONCRITERIA, :HOLDINGPERIOD, :GRO" +
                "SSINTEREST, :SOURCETAX, :EXCISEDUTY, :OTHERCHARGE, :p10, :REMARKS, :NETINTERESTR" +
                "ECEIVABLE, :TOTALAMOUNTRECEIVABLE, :RECEIVABLETILL, :MRNO, :MRDATE, :ENCASHMENTD" +
                "ATE, :p13, :BRANCH_REFERENCE, :SIGNATORY1, :SIGNATORY2, :TAXRATE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "REFERENCE";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "REFERENCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CREATEDDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "CREATEDDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CREATEDBY";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "CREATEDBY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "LASTUPDATED";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "LASTUPDATED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "LASTUPDATEDBY";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "LASTUPDATEDBY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "DEPOSITNUMBER";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "DEPOSITNUMBER";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p1";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "FINANCIALINSTITUTION_REFERENCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "PRINCIPALAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "PRINCIPALAMOUNT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CHEQUEDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "CHEQUEDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CHEQUEREFERENCE";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "CHEQUEREFERENCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "TENURE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "TENURE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "TENURETERM";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 10;
            param.IsNullable = true;
            param.SourceColumn = "TENURETERM";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "TERMSINDAYS";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "TERMSINDAYS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p4";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 10;
            param.IsNullable = true;
            param.SourceColumn = "INTERESTRECEIVINGPERIOD";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "MATURITYDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "MATURITYDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "EXISTINGCAPLIMIT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "EXISTINGCAPLIMIT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "RATEOFINTEREST";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "RATEOFINTEREST";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "ADVANCEDINTERESTRATE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "ADVANCEDINTERESTRATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "INTERESTMODE";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 10;
            param.IsNullable = true;
            param.SourceColumn = "INTERESTMODE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "COMPOUNDINTERESTTYPE";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 10;
            param.IsNullable = true;
            param.SourceColumn = "COMPOUNDINTERESTTYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p7";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 10;
            param.IsNullable = true;
            param.SourceColumn = "COMPOUNDINTERESTINTERVAL";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "ANNUALDAYS";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "ANNUALDAYS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "STATUS";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 10;
            param.IsNullable = true;
            param.SourceColumn = "STATUS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "ACCEPTEDBY";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "ACCEPTEDBY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "ACCEPTEDDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "ACCEPTEDDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "REJECTEDBY";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 10;
            param.IsNullable = true;
            param.SourceColumn = "REJECTEDBY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "REJECTEDDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "REJECTEDDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "OPENINGDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "OPENINGDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "RENWALDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "RENWALDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "RENEWALDEPOSITNUMBER";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "RENEWALDEPOSITNUMBER";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "TAXDEDUCTIONCRITERIA";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "TAXDEDUCTIONCRITERIA";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "HOLDINGPERIOD";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "HOLDINGPERIOD";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "GROSSINTEREST";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "GROSSINTEREST";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "SOURCETAX";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "SOURCETAX";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "EXCISEDUTY";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "EXCISEDUTY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "OTHERCHARGE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "OTHERCHARGE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p10";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "PRESENTPRINCIPALAMOUNT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "REMARKS";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "REMARKS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "NETINTERESTRECEIVABLE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "NETINTERESTRECEIVABLE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "TOTALAMOUNTRECEIVABLE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "TOTALAMOUNTRECEIVABLE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "RECEIVABLETILL";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "RECEIVABLETILL";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "MRNO";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "MRNO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "MRDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "MRDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "ENCASHMENTDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "ENCASHMENTDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p13";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "ACTUALINTERESTRECEIVED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "BRANCH_REFERENCE";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "BRANCH_REFERENCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "SIGNATORY1";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "SIGNATORY1";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "SIGNATORY2";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "SIGNATORY2";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "TAXRATE";
            param.DbType = global::System.Data.DbType.Double;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Double;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "TAXRATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Oracle.ManagedDataAccess.Client.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"MPRO\".\"FIXEDDEPOSIT\" SET \"REFERENCE\" = :REFERENCE, \"CREATEDDATE\" = :CREAT" +
                "EDDATE, \"CREATEDBY\" = :CREATEDBY, \"LASTUPDATED\" = :LASTUPDATED, \"LASTUPDATEDBY\" " +
                "= :LASTUPDATEDBY, \"DEPOSITNUMBER\" = :DEPOSITNUMBER, \"FINANCIALINSTITUTION_REFERE" +
                "NCE\" = :p1, \"PRINCIPALAMOUNT\" = :PRINCIPALAMOUNT, \"CHEQUEDATE\" = :CHEQUEDATE, \"C" +
                "HEQUEREFERENCE\" = :CHEQUEREFERENCE, \"TENURE\" = :TENURE, \"TENURETERM\" = :TENURETE" +
                "RM, \"TERMSINDAYS\" = :TERMSINDAYS, \"INTERESTRECEIVINGPERIOD\" = :p4, \"MATURITYDATE" +
                "\" = :MATURITYDATE, \"EXISTINGCAPLIMIT\" = :EXISTINGCAPLIMIT, \"RATEOFINTEREST\" = :R" +
                "ATEOFINTEREST, \"ADVANCEDINTERESTRATE\" = :ADVANCEDINTERESTRATE, \"INTERESTMODE\" = " +
                ":INTERESTMODE, \"COMPOUNDINTERESTTYPE\" = :COMPOUNDINTERESTTYPE, \"COMPOUNDINTEREST" +
                "INTERVAL\" = :p7, \"ANNUALDAYS\" = :ANNUALDAYS, \"STATUS\" = :STATUS, \"ACCEPTEDBY\" = " +
                ":ACCEPTEDBY, \"ACCEPTEDDATE\" = :ACCEPTEDDATE, \"REJECTEDBY\" = :REJECTEDBY, \"REJECT" +
                "EDDATE\" = :REJECTEDDATE, \"OPENINGDATE\" = :OPENINGDATE, \"RENWALDATE\" = :RENWALDAT" +
                "E, \"RENEWALDEPOSITNUMBER\" = :RENEWALDEPOSITNUMBER, \"TAXDEDUCTIONCRITERIA\" = :TAX" +
                "DEDUCTIONCRITERIA, \"HOLDINGPERIOD\" = :HOLDINGPERIOD, \"GROSSINTEREST\" = :GROSSINT" +
                "EREST, \"SOURCETAX\" = :SOURCETAX, \"EXCISEDUTY\" = :EXCISEDUTY, \"OTHERCHARGE\" = :OT" +
                "HERCHARGE, \"PRESENTPRINCIPALAMOUNT\" = :p10, \"REMARKS\" = :REMARKS, \"NETINTERESTRE" +
                "CEIVABLE\" = :NETINTERESTRECEIVABLE, \"TOTALAMOUNTRECEIVABLE\" = :TOTALAMOUNTRECEIV" +
                "ABLE, \"RECEIVABLETILL\" = :RECEIVABLETILL, \"MRNO\" = :MRNO, \"MRDATE\" = :MRDATE, \"E" +
                "NCASHMENTDATE\" = :ENCASHMENTDATE, \"ACTUALINTERESTRECEIVED\" = :p13, \"BRANCH_REFER" +
                "ENCE\" = :BRANCH_REFERENCE, \"SIGNATORY1\" = :SIGNATORY1, \"SIGNATORY2\" = :SIGNATORY" +
                "2, \"TAXRATE\" = :TAXRATE WHERE ((\"REFERENCE\" = :Original_REFERENCE))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "REFERENCE";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "REFERENCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CREATEDDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "CREATEDDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CREATEDBY";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "CREATEDBY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "LASTUPDATED";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "LASTUPDATED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "LASTUPDATEDBY";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "LASTUPDATEDBY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "DEPOSITNUMBER";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "DEPOSITNUMBER";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p1";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "FINANCIALINSTITUTION_REFERENCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "PRINCIPALAMOUNT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "PRINCIPALAMOUNT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CHEQUEDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "CHEQUEDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CHEQUEREFERENCE";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "CHEQUEREFERENCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "TENURE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "TENURE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "TENURETERM";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 10;
            param.IsNullable = true;
            param.SourceColumn = "TENURETERM";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "TERMSINDAYS";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "TERMSINDAYS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p4";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 10;
            param.IsNullable = true;
            param.SourceColumn = "INTERESTRECEIVINGPERIOD";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "MATURITYDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "MATURITYDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "EXISTINGCAPLIMIT";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "EXISTINGCAPLIMIT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "RATEOFINTEREST";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "RATEOFINTEREST";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "ADVANCEDINTERESTRATE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "ADVANCEDINTERESTRATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "INTERESTMODE";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 10;
            param.IsNullable = true;
            param.SourceColumn = "INTERESTMODE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "COMPOUNDINTERESTTYPE";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 10;
            param.IsNullable = true;
            param.SourceColumn = "COMPOUNDINTERESTTYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p7";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 10;
            param.IsNullable = true;
            param.SourceColumn = "COMPOUNDINTERESTINTERVAL";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "ANNUALDAYS";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "ANNUALDAYS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "STATUS";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 10;
            param.IsNullable = true;
            param.SourceColumn = "STATUS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "ACCEPTEDBY";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "ACCEPTEDBY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "ACCEPTEDDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "ACCEPTEDDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "REJECTEDBY";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 10;
            param.IsNullable = true;
            param.SourceColumn = "REJECTEDBY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "REJECTEDDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "REJECTEDDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "OPENINGDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "OPENINGDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "RENWALDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "RENWALDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "RENEWALDEPOSITNUMBER";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "RENEWALDEPOSITNUMBER";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "TAXDEDUCTIONCRITERIA";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "TAXDEDUCTIONCRITERIA";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "HOLDINGPERIOD";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "HOLDINGPERIOD";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "GROSSINTEREST";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "GROSSINTEREST";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "SOURCETAX";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "SOURCETAX";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "EXCISEDUTY";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "EXCISEDUTY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "OTHERCHARGE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "OTHERCHARGE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p10";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "PRESENTPRINCIPALAMOUNT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "REMARKS";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "REMARKS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "NETINTERESTRECEIVABLE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "NETINTERESTRECEIVABLE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "TOTALAMOUNTRECEIVABLE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "TOTALAMOUNTRECEIVABLE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "RECEIVABLETILL";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "RECEIVABLETILL";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "MRNO";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "MRNO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "MRDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "MRDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "ENCASHMENTDATE";
            param.DbType = global::System.Data.DbType.Date;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Date;
            param.Size = 7;
            param.IsNullable = true;
            param.SourceColumn = "ENCASHMENTDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p13";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Decimal;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "ACTUALINTERESTRECEIVED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "BRANCH_REFERENCE";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "BRANCH_REFERENCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "SIGNATORY1";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "SIGNATORY1";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "SIGNATORY2";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "SIGNATORY2";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "TAXRATE";
            param.DbType = global::System.Data.DbType.Double;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Double;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "TAXRATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_REFERENCE";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "REFERENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Oracle.ManagedDataAccess.Client.OracleConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Oracle.ManagedDataAccess.Client.OracleCommand[1];
            this._commandCollection[0] = new global::Oracle.ManagedDataAccess.Client.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ""REFERENCE"", CREATEDDATE, CREATEDBY, LASTUPDATED, LASTUPDATEDBY, DEPOSITNUMBER, FINANCIALINSTITUTION_REFERENCE, PRINCIPALAMOUNT, CHEQUEDATE, CHEQUEREFERENCE, TENURE, TENURETERM, TERMSINDAYS, INTERESTRECEIVINGPERIOD, MATURITYDATE, EXISTINGCAPLIMIT, RATEOFINTEREST, ADVANCEDINTERESTRATE, INTERESTMODE, COMPOUNDINTERESTTYPE, COMPOUNDINTERESTINTERVAL, ANNUALDAYS, STATUS, ACCEPTEDBY, ACCEPTEDDATE, REJECTEDBY, REJECTEDDATE, OPENINGDATE, RENWALDATE, RENEWALDEPOSITNUMBER, TAXDEDUCTIONCRITERIA, HOLDINGPERIOD, GROSSINTEREST, SOURCETAX, EXCISEDUTY, OTHERCHARGE, PRESENTPRINCIPALAMOUNT, REMARKS, NETINTERESTRECEIVABLE, TOTALAMOUNTRECEIVABLE, RECEIVABLETILL, MRNO, MRDATE, ENCASHMENTDATE, ACTUALINTERESTRECEIVED, BRANCH_REFERENCE, SIGNATORY1, SIGNATORY2, TAXRATE FROM MPRO.FIXEDDEPOSIT";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FDRmainStatement.FIXEDDEPOSITDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FDRmainStatement.FIXEDDEPOSITDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FDRmainStatement.FIXEDDEPOSITDataTable dataTable = new FDRmainStatement.FIXEDDEPOSITDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FDRmainStatement.FIXEDDEPOSITDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FDRmainStatement dataSet) {
            return this.Adapter.Update(dataSet, "FIXEDDEPOSIT");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_REFERENCE) {
            if ((Original_REFERENCE == null)) {
                throw new global::System.ArgumentNullException("Original_REFERENCE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_REFERENCE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string REFERENCE, 
                    global::System.Nullable<global::System.DateTime> CREATEDDATE, 
                    string CREATEDBY, 
                    global::System.Nullable<global::System.DateTime> LASTUPDATED, 
                    string LASTUPDATEDBY, 
                    string DEPOSITNUMBER, 
                    string p1, 
                    global::System.Nullable<decimal> PRINCIPALAMOUNT, 
                    global::System.Nullable<global::System.DateTime> CHEQUEDATE, 
                    string CHEQUEREFERENCE, 
                    global::System.Nullable<decimal> TENURE, 
                    string TENURETERM, 
                    global::System.Nullable<decimal> TERMSINDAYS, 
                    string p4, 
                    global::System.Nullable<global::System.DateTime> MATURITYDATE, 
                    global::System.Nullable<decimal> EXISTINGCAPLIMIT, 
                    global::System.Nullable<decimal> RATEOFINTEREST, 
                    global::System.Nullable<decimal> ADVANCEDINTERESTRATE, 
                    string INTERESTMODE, 
                    string COMPOUNDINTERESTTYPE, 
                    string p7, 
                    global::System.Nullable<decimal> ANNUALDAYS, 
                    string STATUS, 
                    string ACCEPTEDBY, 
                    global::System.Nullable<global::System.DateTime> ACCEPTEDDATE, 
                    string REJECTEDBY, 
                    global::System.Nullable<global::System.DateTime> REJECTEDDATE, 
                    global::System.Nullable<global::System.DateTime> OPENINGDATE, 
                    global::System.Nullable<global::System.DateTime> RENWALDATE, 
                    string RENEWALDEPOSITNUMBER, 
                    string TAXDEDUCTIONCRITERIA, 
                    global::System.Nullable<decimal> HOLDINGPERIOD, 
                    global::System.Nullable<decimal> GROSSINTEREST, 
                    global::System.Nullable<decimal> SOURCETAX, 
                    global::System.Nullable<decimal> EXCISEDUTY, 
                    global::System.Nullable<decimal> OTHERCHARGE, 
                    global::System.Nullable<decimal> p10, 
                    string REMARKS, 
                    global::System.Nullable<decimal> NETINTERESTRECEIVABLE, 
                    global::System.Nullable<decimal> TOTALAMOUNTRECEIVABLE, 
                    global::System.Nullable<decimal> RECEIVABLETILL, 
                    string MRNO, 
                    global::System.Nullable<global::System.DateTime> MRDATE, 
                    global::System.Nullable<global::System.DateTime> ENCASHMENTDATE, 
                    global::System.Nullable<decimal> p13, 
                    string BRANCH_REFERENCE, 
                    string SIGNATORY1, 
                    string SIGNATORY2, 
                    global::System.Nullable<double> TAXRATE) {
            if ((REFERENCE == null)) {
                throw new global::System.ArgumentNullException("REFERENCE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(REFERENCE));
            }
            if ((CREATEDDATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(CREATEDDATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((CREATEDBY == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CREATEDBY));
            }
            if ((LASTUPDATED.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(LASTUPDATED.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((LASTUPDATEDBY == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(LASTUPDATEDBY));
            }
            if ((DEPOSITNUMBER == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(DEPOSITNUMBER));
            }
            if ((p1 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(p1));
            }
            if ((PRINCIPALAMOUNT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(PRINCIPALAMOUNT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((CHEQUEDATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((System.DateTime)(CHEQUEDATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((CHEQUEREFERENCE == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(CHEQUEREFERENCE));
            }
            if ((TENURE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(TENURE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((TENURETERM == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(TENURETERM));
            }
            if ((TERMSINDAYS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(TERMSINDAYS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(p4));
            }
            if ((MATURITYDATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((System.DateTime)(MATURITYDATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((EXISTINGCAPLIMIT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((decimal)(EXISTINGCAPLIMIT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((RATEOFINTEREST.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((decimal)(RATEOFINTEREST.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((ADVANCEDINTERESTRATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((decimal)(ADVANCEDINTERESTRATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((INTERESTMODE == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(INTERESTMODE));
            }
            if ((COMPOUNDINTERESTTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(COMPOUNDINTERESTTYPE));
            }
            if ((p7 == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(p7));
            }
            if ((ANNUALDAYS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((decimal)(ANNUALDAYS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((STATUS == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(STATUS));
            }
            if ((ACCEPTEDBY == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(ACCEPTEDBY));
            }
            if ((ACCEPTEDDATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((System.DateTime)(ACCEPTEDDATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((REJECTEDBY == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(REJECTEDBY));
            }
            if ((REJECTEDDATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((System.DateTime)(REJECTEDDATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((OPENINGDATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((System.DateTime)(OPENINGDATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((RENWALDATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[28].Value = ((System.DateTime)(RENWALDATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((RENEWALDEPOSITNUMBER == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(RENEWALDEPOSITNUMBER));
            }
            if ((TAXDEDUCTIONCRITERIA == null)) {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = ((string)(TAXDEDUCTIONCRITERIA));
            }
            if ((HOLDINGPERIOD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((decimal)(HOLDINGPERIOD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((GROSSINTEREST.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((decimal)(GROSSINTEREST.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((SOURCETAX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((decimal)(SOURCETAX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((EXCISEDUTY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[34].Value = ((decimal)(EXCISEDUTY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((OTHERCHARGE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[35].Value = ((decimal)(OTHERCHARGE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((p10.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[36].Value = ((decimal)(p10.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((REMARKS == null)) {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = ((string)(REMARKS));
            }
            if ((NETINTERESTRECEIVABLE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[38].Value = ((decimal)(NETINTERESTRECEIVABLE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((TOTALAMOUNTRECEIVABLE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[39].Value = ((decimal)(TOTALAMOUNTRECEIVABLE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((RECEIVABLETILL.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[40].Value = ((decimal)(RECEIVABLETILL.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((MRNO == null)) {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = ((string)(MRNO));
            }
            if ((MRDATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[42].Value = ((System.DateTime)(MRDATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((ENCASHMENTDATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[43].Value = ((System.DateTime)(ENCASHMENTDATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((p13.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[44].Value = ((decimal)(p13.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((BRANCH_REFERENCE == null)) {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[45].Value = ((string)(BRANCH_REFERENCE));
            }
            if ((SIGNATORY1 == null)) {
                this.Adapter.InsertCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[46].Value = ((string)(SIGNATORY1));
            }
            if ((SIGNATORY2 == null)) {
                this.Adapter.InsertCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[47].Value = ((string)(SIGNATORY2));
            }
            if ((TAXRATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[48].Value = ((double)(TAXRATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string REFERENCE, 
                    global::System.Nullable<global::System.DateTime> CREATEDDATE, 
                    string CREATEDBY, 
                    global::System.Nullable<global::System.DateTime> LASTUPDATED, 
                    string LASTUPDATEDBY, 
                    string DEPOSITNUMBER, 
                    string p1, 
                    global::System.Nullable<decimal> PRINCIPALAMOUNT, 
                    global::System.Nullable<global::System.DateTime> CHEQUEDATE, 
                    string CHEQUEREFERENCE, 
                    global::System.Nullable<decimal> TENURE, 
                    string TENURETERM, 
                    global::System.Nullable<decimal> TERMSINDAYS, 
                    string p4, 
                    global::System.Nullable<global::System.DateTime> MATURITYDATE, 
                    global::System.Nullable<decimal> EXISTINGCAPLIMIT, 
                    global::System.Nullable<decimal> RATEOFINTEREST, 
                    global::System.Nullable<decimal> ADVANCEDINTERESTRATE, 
                    string INTERESTMODE, 
                    string COMPOUNDINTERESTTYPE, 
                    string p7, 
                    global::System.Nullable<decimal> ANNUALDAYS, 
                    string STATUS, 
                    string ACCEPTEDBY, 
                    global::System.Nullable<global::System.DateTime> ACCEPTEDDATE, 
                    string REJECTEDBY, 
                    global::System.Nullable<global::System.DateTime> REJECTEDDATE, 
                    global::System.Nullable<global::System.DateTime> OPENINGDATE, 
                    global::System.Nullable<global::System.DateTime> RENWALDATE, 
                    string RENEWALDEPOSITNUMBER, 
                    string TAXDEDUCTIONCRITERIA, 
                    global::System.Nullable<decimal> HOLDINGPERIOD, 
                    global::System.Nullable<decimal> GROSSINTEREST, 
                    global::System.Nullable<decimal> SOURCETAX, 
                    global::System.Nullable<decimal> EXCISEDUTY, 
                    global::System.Nullable<decimal> OTHERCHARGE, 
                    global::System.Nullable<decimal> p10, 
                    string REMARKS, 
                    global::System.Nullable<decimal> NETINTERESTRECEIVABLE, 
                    global::System.Nullable<decimal> TOTALAMOUNTRECEIVABLE, 
                    global::System.Nullable<decimal> RECEIVABLETILL, 
                    string MRNO, 
                    global::System.Nullable<global::System.DateTime> MRDATE, 
                    global::System.Nullable<global::System.DateTime> ENCASHMENTDATE, 
                    global::System.Nullable<decimal> p13, 
                    string BRANCH_REFERENCE, 
                    string SIGNATORY1, 
                    string SIGNATORY2, 
                    global::System.Nullable<double> TAXRATE, 
                    string Original_REFERENCE) {
            if ((REFERENCE == null)) {
                throw new global::System.ArgumentNullException("REFERENCE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(REFERENCE));
            }
            if ((CREATEDDATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(CREATEDDATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((CREATEDBY == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CREATEDBY));
            }
            if ((LASTUPDATED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(LASTUPDATED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((LASTUPDATEDBY == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(LASTUPDATEDBY));
            }
            if ((DEPOSITNUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(DEPOSITNUMBER));
            }
            if ((p1 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(p1));
            }
            if ((PRINCIPALAMOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(PRINCIPALAMOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((CHEQUEDATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(CHEQUEDATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((CHEQUEREFERENCE == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(CHEQUEREFERENCE));
            }
            if ((TENURE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(TENURE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((TENURETERM == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(TENURETERM));
            }
            if ((TERMSINDAYS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(TERMSINDAYS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((p4 == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(p4));
            }
            if ((MATURITYDATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(MATURITYDATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((EXISTINGCAPLIMIT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((decimal)(EXISTINGCAPLIMIT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((RATEOFINTEREST.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(RATEOFINTEREST.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((ADVANCEDINTERESTRATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(ADVANCEDINTERESTRATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((INTERESTMODE == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(INTERESTMODE));
            }
            if ((COMPOUNDINTERESTTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(COMPOUNDINTERESTTYPE));
            }
            if ((p7 == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(p7));
            }
            if ((ANNUALDAYS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((decimal)(ANNUALDAYS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((STATUS == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(STATUS));
            }
            if ((ACCEPTEDBY == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(ACCEPTEDBY));
            }
            if ((ACCEPTEDDATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((System.DateTime)(ACCEPTEDDATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((REJECTEDBY == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(REJECTEDBY));
            }
            if ((REJECTEDDATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((System.DateTime)(REJECTEDDATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((OPENINGDATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((System.DateTime)(OPENINGDATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((RENWALDATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((System.DateTime)(RENWALDATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((RENEWALDEPOSITNUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(RENEWALDEPOSITNUMBER));
            }
            if ((TAXDEDUCTIONCRITERIA == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(TAXDEDUCTIONCRITERIA));
            }
            if ((HOLDINGPERIOD.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((decimal)(HOLDINGPERIOD.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((GROSSINTEREST.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((decimal)(GROSSINTEREST.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((SOURCETAX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((decimal)(SOURCETAX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((EXCISEDUTY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((decimal)(EXCISEDUTY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((OTHERCHARGE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((decimal)(OTHERCHARGE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((p10.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((decimal)(p10.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((REMARKS == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(REMARKS));
            }
            if ((NETINTERESTRECEIVABLE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((decimal)(NETINTERESTRECEIVABLE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((TOTALAMOUNTRECEIVABLE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((decimal)(TOTALAMOUNTRECEIVABLE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((RECEIVABLETILL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((decimal)(RECEIVABLETILL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((MRNO == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(MRNO));
            }
            if ((MRDATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((System.DateTime)(MRDATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((ENCASHMENTDATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((System.DateTime)(ENCASHMENTDATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((p13.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((decimal)(p13.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((BRANCH_REFERENCE == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(BRANCH_REFERENCE));
            }
            if ((SIGNATORY1 == null)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(SIGNATORY1));
            }
            if ((SIGNATORY2 == null)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(SIGNATORY2));
            }
            if ((TAXRATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((double)(TAXRATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_REFERENCE == null)) {
                throw new global::System.ArgumentNullException("Original_REFERENCE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(Original_REFERENCE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<global::System.DateTime> CREATEDDATE, 
                    string CREATEDBY, 
                    global::System.Nullable<global::System.DateTime> LASTUPDATED, 
                    string LASTUPDATEDBY, 
                    string DEPOSITNUMBER, 
                    string p1, 
                    global::System.Nullable<decimal> PRINCIPALAMOUNT, 
                    global::System.Nullable<global::System.DateTime> CHEQUEDATE, 
                    string CHEQUEREFERENCE, 
                    global::System.Nullable<decimal> TENURE, 
                    string TENURETERM, 
                    global::System.Nullable<decimal> TERMSINDAYS, 
                    string p4, 
                    global::System.Nullable<global::System.DateTime> MATURITYDATE, 
                    global::System.Nullable<decimal> EXISTINGCAPLIMIT, 
                    global::System.Nullable<decimal> RATEOFINTEREST, 
                    global::System.Nullable<decimal> ADVANCEDINTERESTRATE, 
                    string INTERESTMODE, 
                    string COMPOUNDINTERESTTYPE, 
                    string p7, 
                    global::System.Nullable<decimal> ANNUALDAYS, 
                    string STATUS, 
                    string ACCEPTEDBY, 
                    global::System.Nullable<global::System.DateTime> ACCEPTEDDATE, 
                    string REJECTEDBY, 
                    global::System.Nullable<global::System.DateTime> REJECTEDDATE, 
                    global::System.Nullable<global::System.DateTime> OPENINGDATE, 
                    global::System.Nullable<global::System.DateTime> RENWALDATE, 
                    string RENEWALDEPOSITNUMBER, 
                    string TAXDEDUCTIONCRITERIA, 
                    global::System.Nullable<decimal> HOLDINGPERIOD, 
                    global::System.Nullable<decimal> GROSSINTEREST, 
                    global::System.Nullable<decimal> SOURCETAX, 
                    global::System.Nullable<decimal> EXCISEDUTY, 
                    global::System.Nullable<decimal> OTHERCHARGE, 
                    global::System.Nullable<decimal> p10, 
                    string REMARKS, 
                    global::System.Nullable<decimal> NETINTERESTRECEIVABLE, 
                    global::System.Nullable<decimal> TOTALAMOUNTRECEIVABLE, 
                    global::System.Nullable<decimal> RECEIVABLETILL, 
                    string MRNO, 
                    global::System.Nullable<global::System.DateTime> MRDATE, 
                    global::System.Nullable<global::System.DateTime> ENCASHMENTDATE, 
                    global::System.Nullable<decimal> p13, 
                    string BRANCH_REFERENCE, 
                    string SIGNATORY1, 
                    string SIGNATORY2, 
                    global::System.Nullable<double> TAXRATE, 
                    string Original_REFERENCE) {
            return this.Update(Original_REFERENCE, CREATEDDATE, CREATEDBY, LASTUPDATED, LASTUPDATEDBY, DEPOSITNUMBER, p1, PRINCIPALAMOUNT, CHEQUEDATE, CHEQUEREFERENCE, TENURE, TENURETERM, TERMSINDAYS, p4, MATURITYDATE, EXISTINGCAPLIMIT, RATEOFINTEREST, ADVANCEDINTERESTRATE, INTERESTMODE, COMPOUNDINTERESTTYPE, p7, ANNUALDAYS, STATUS, ACCEPTEDBY, ACCEPTEDDATE, REJECTEDBY, REJECTEDDATE, OPENINGDATE, RENWALDATE, RENEWALDEPOSITNUMBER, TAXDEDUCTIONCRITERIA, HOLDINGPERIOD, GROSSINTEREST, SOURCETAX, EXCISEDUTY, OTHERCHARGE, p10, REMARKS, NETINTERESTRECEIVABLE, TOTALAMOUNTRECEIVABLE, RECEIVABLETILL, MRNO, MRDATE, ENCASHMENTDATE, p13, BRANCH_REFERENCE, SIGNATORY1, SIGNATORY2, TAXRATE, Original_REFERENCE);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private FIXEDDEPOSITTableAdapter _fIXEDDEPOSITTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public FIXEDDEPOSITTableAdapter FIXEDDEPOSITTableAdapter {
            get {
                return this._fIXEDDEPOSITTableAdapter;
            }
            set {
                this._fIXEDDEPOSITTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._fIXEDDEPOSITTableAdapter != null) 
                            && (this._fIXEDDEPOSITTableAdapter.Connection != null))) {
                    return this._fIXEDDEPOSITTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._fIXEDDEPOSITTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(FDRmainStatement dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._fIXEDDEPOSITTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FIXEDDEPOSIT.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fIXEDDEPOSITTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(FDRmainStatement dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._fIXEDDEPOSITTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FIXEDDEPOSIT.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fIXEDDEPOSITTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(FDRmainStatement dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._fIXEDDEPOSITTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FIXEDDEPOSIT.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fIXEDDEPOSITTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(FDRmainStatement dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._fIXEDDEPOSITTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fIXEDDEPOSITTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._fIXEDDEPOSITTableAdapter != null)) {
                    revertConnections.Add(this._fIXEDDEPOSITTableAdapter, this._fIXEDDEPOSITTableAdapter.Connection);
                    this._fIXEDDEPOSITTableAdapter.Connection = ((global::Oracle.ManagedDataAccess.Client.OracleConnection)(workConnection));
                    this._fIXEDDEPOSITTableAdapter.Transaction = ((global::Oracle.ManagedDataAccess.Client.OracleTransaction)(workTransaction));
                    if (this._fIXEDDEPOSITTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fIXEDDEPOSITTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fIXEDDEPOSITTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._fIXEDDEPOSITTableAdapter != null)) {
                    this._fIXEDDEPOSITTableAdapter.Connection = ((global::Oracle.ManagedDataAccess.Client.OracleConnection)(revertConnections[this._fIXEDDEPOSITTableAdapter]));
                    this._fIXEDDEPOSITTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591