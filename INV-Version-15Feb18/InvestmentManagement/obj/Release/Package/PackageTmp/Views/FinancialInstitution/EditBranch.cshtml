@model InvestmentManagement.InvestmentManagement.Models.FIBRANCH
@{
    
    TempData["financialInstitution"] = ViewBag.Refernec;   
 }

<div id="Replace">
    <div class="contentTop">
        <span class="pageTitle">
           <span class=" glyphicon glyphicon-yen"></span>
          @Session["currentPage"]
        </span>

    </div>
  <ol class="breadcrumb">
       @Html.Raw(@ViewBag.BreadCum)
    </ol>
<div class="wrapper pl">
    <div class="alert alert-success mt20">
        <button class="close" data-dismiss="alert" type="button">×</button>
         @ViewBag.Message
    </div>
    <div class="container-fluid">

        <div class="widget">
            <div class="whead">
                <h6>
                    <label id="lblHeader" title="">@ViewBag.Header</label>
                </h6>
                <div class="clear">
                </div>
            </div>
@using (Ajax.BeginForm("EditBranch", " FIBRANCH", new AjaxOptions { HttpMethod = "POST", InsertionMode = System.Web.Mvc.Ajax.InsertionMode.Replace, UpdateTargetId = "Replace", OnBegin = "ShowProcessingMsg", OnSuccess = "HideProcessingMsg" }, new { autocomplete = "off" }))
{ 

    
                    @Html.Hidden("REFERENCE", Model.REFERENCE)
                    @Html.Hidden("CREATEDBY", Model.CREATEDBY)
                    @Html.Hidden("CREATEDDATE", Model.CREATEDDATE)
                    @Html.Hidden("LASTUPDATED", Model.LASTUPDATEDBY)
                    @Html.Hidden("LASTUPDATEDBY", Model.LASTUPDATEDBY)
                    @Html.Hidden("FINANCIALINSTITUTION_REFERENCE", Model.FINANCIALINSTITUTION_REFERENCE)

    
                <div class="entryForm col-md-6"> 
                       <ul class="entryForm singleadd ">
                            <li class="form-group">

                                @Html.LabelFor(model => model.CODE, new { @class = "control-label entrylable" })

                                @Html.TextBoxFor(model => model.CODE, new { @class = "form-control", @maxlength = "20", @placeholder = "Please Enter Your " + @Html.DisplayNameFor(model => model.CODE) + "", @onfocus = "this.placeholder = ''", @onblur = "this.placeholder = '" + @Html.DisplayNameFor(model => model.CODE) + "'" })
                            
                                <br />
                                @Html.ValidationMessageFor(model => model.CODE)

                            </li>
                            
                            <li class="form-group">

                                @Html.LabelFor(model => model.NAME, new { @class = "control-label entrylable" })

                                @Html.TextBoxFor(model => model.NAME, new { @class = "form-control",@required = "required", @placeholder = "Please Enter Your " + @Html.DisplayNameFor(model => model.NAME) + "", @onfocus = "this.placeholder = ''", @onblur = "this.placeholder = '" + @Html.DisplayNameFor(model => model.NAME) + "'" })


                                <br />
                                @Html.ValidationMessageFor(model => model.NAME)

                            </li>
                            
                            

                            <li class="form-group">

                                @Html.LabelFor(model => model.ROUTINGNUMBER, new { @class = "control-label entrylable" })

                                @Html.TextBoxFor(model => model.ROUTINGNUMBER, new { @class = "form-control", @placeholder = "Please Enter Your " + @Html.DisplayNameFor(model => model.ROUTINGNUMBER) + "", @onfocus = "this.placeholder = ''", @onblur = "this.placeholder = '" + @Html.DisplayNameFor(model => model.ROUTINGNUMBER) + "'" })
                             
                                <br />
                                @Html.ValidationMessageFor(model => model.ROUTINGNUMBER)

                            </li>
                            <li class="form-group">

                                @Html.LabelFor(model => model.SWIFTCODE, new { @class = "control-label entrylable" })

                                @Html.TextBoxFor(model => model.SWIFTCODE, new { @class = "form-control", @placeholder = "Please Enter Your " + @Html.DisplayNameFor(model => model.SWIFTCODE) + "", @onfocus = "this.placeholder = ''", @onblur = "this.placeholder = '" + @Html.DisplayNameFor(model => model.SWIFTCODE) + "'" })

                                <br />
                                @Html.ValidationMessageFor(model => model.SWIFTCODE)

                            </li>
                            <li class="form-group">

                                @Html.LabelFor(model => model.DISTRICTCODE, new { @class = "control-label entrylable" })

                                @Html.TextBoxFor(model => model.DISTRICTCODE, new { @class = "form-control", @placeholder = "Please Enter Your " + @Html.DisplayNameFor(model => model.DISTRICTCODE) + "", @onfocus = "this.placeholder = ''", @onblur = "this.placeholder = '" + @Html.DisplayNameFor(model => model.DISTRICTCODE) + "'" })
                               

                                <br />
                                @Html.ValidationMessageFor(model => model.DISTRICTCODE)

                            </li>
                            
                            <li class="form-group">

                                @Html.LabelFor(model => model.ADDRESSLINE1, new { @class = "control-label entrylable" })

                                @Html.TextBoxFor(model => model.ADDRESSLINE1, new { @class = "form-control",@required = "required", @placeholder = "Please Enter Your " + @Html.DisplayNameFor(model => model.ADDRESSLINE1) + "", @onfocus = "this.placeholder = ''", @onblur = "this.placeholder = '" + @Html.DisplayNameFor(model => model.ADDRESSLINE1) + "'" })


                                <br />
                                @Html.ValidationMessageFor(model => model.ADDRESSLINE1)

                            </li>
                            <li class="form-group">

                                @Html.LabelFor(model => model.ADDRESSLINE2, new { @class = "control-label entrylable" })

                                @Html.TextBoxFor(model => model.ADDRESSLINE2, new { @class = "form-control",@required = "required", @placeholder = "Please Enter Your " + @Html.DisplayNameFor(model => model.ADDRESSLINE2) + "", @onfocus = "this.placeholder = ''", @onblur = "this.placeholder = '" + @Html.DisplayNameFor(model => model.ADDRESSLINE2) + "'" })


                                <br />
                                @Html.ValidationMessageFor(model => model.ADDRESSLINE2)

                            </li>
                            <li class="form-group">

                                @Html.LabelFor(model => model.DISTRICTNAME, new { @class = "control-label entrylable" })

                                @Html.TextBoxFor(model => model.DISTRICTNAME, new { @class = "form-control",@required = "required", @placeholder = "Please Enter Your " + @Html.DisplayNameFor(model => model.DISTRICTNAME) + "", @onfocus = "this.placeholder = ''", @onblur = "this.placeholder = '" + @Html.DisplayNameFor(model => model.DISTRICTNAME) + "'" })
                               

                                <br />
                                @Html.ValidationMessageFor(model => model.DISTRICTNAME)

                            </li>
                            <li class="form-group">

                                @Html.LabelFor(model => model.POSTCODE, new { @class = "control-label entrylable" })

                                @Html.TextBoxFor(model => model.POSTCODE, new { @class = "form-control", @placeholder = "Please Enter Your " + @Html.DisplayNameFor(model => model.POSTCODE) + "", @onfocus = "this.placeholder = ''", @onblur = "this.placeholder = '" + @Html.DisplayNameFor(model => model.POSTCODE) + "'" })

                             
                                <br />
                                @Html.ValidationMessageFor(model => model.POSTCODE)

                            </li>
                            <li class="form-group">

                                @Html.LabelFor(model => model.CONTACTPERSON, new { @class = "control-label entrylable" })

                                @Html.TextBoxFor(model => model.CONTACTPERSON, new { @class = "form-control", @placeholder = "Please Enter Your " + @Html.DisplayNameFor(model => model.CONTACTPERSON) + "", @onfocus = "this.placeholder = ''", @onblur = "this.placeholder = '" + @Html.DisplayNameFor(model => model.CONTACTPERSON) + "'" })
                                
                                <br />
                                @Html.ValidationMessageFor(model => model.CONTACTPERSON)

                            </li>
                        </ul>

                            <button type="submit" class="btn btn-success btnSingleAddForm">Save</button>                                                
                 

                      @if (Request.RawUrl.Contains("X-Requested-With=XMLHttpRequest") || Request.AcceptTypes.Contains("*/*"))
                      {
                         @Ajax.ActionLink("Close", "ListOfBranch", "FinancialInstitution",
                         new AjaxOptions { UpdateTargetId = "replace", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnBegin = "ShowProcessingMsg", OnSuccess = "HideProcessingMsg" }, new {@class="load btn btn-danger closeButton" })
                      }
                      else
                      {
                        <a class="load btn btn-danger closeButton" href="~/#/FinancialInstitution/ListOfBranch?FINANCIALINSTITUTION=@ViewBag.Refernec">Close</a>
                      }
                         
                       @*     <a class="load btn btn-danger closeButton" href="~/#/FinancialInstitution/ListOfBranch?lblbreadcum=">Close</a>*@

                            </div>
    
                            }

        </div>


    </div>
</div>
    <p></p>


    <script type="text/javascript">
        function ShowProcessingMsg() {

            $('.loadingImage').show();

        }
        function HideProcessingMsg() {
            $('.loadingImage').hide();
        }

    </script>
<script>

    $(function () {
        $('.datepicker').datepicker({ dateFormat: "dd/mm/yy" });
       
        //$(".dropdown-menu li a").click(function (event) {
            //var selText = $(this).text();
            //$('.hidden').val(selText);
            //$(this).parents('.btn-group').find('.dropdown-toggle').html(selText + ' <span class="caret"></span>');
            //event.preventDefault();
        //});

    });

</script>

<script>
    $(document).on('keypress', '.number', function (event) {

        if (event.keyCode == 46 || event.keyCode == 8) {
            // let it happen, don't do anything
        } else if ((event.which < 48 || event.which > 57)) {
            event.preventDefault();
        }

    });
    $(document).on('keypress', '.decimal', function (event) {

        if (event.keyCode == 46 || event.keyCode == 8) {
            // let it happen, don't do anything
        } else if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which < 48 || event.which > 57)) {
            event.preventDefault();
        }

    });


</script>

</div>

